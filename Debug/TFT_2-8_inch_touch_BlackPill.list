
TFT_2-8_inch_touch_BlackPill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002148  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080022dc  080022dc  000032dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022ec  080022ec  00004014  2**0
                  CONTENTS
  4 .ARM          00000008  080022ec  080022ec  000032ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022f4  080022f4  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f4  080022f4  000032f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022f8  080022f8  000032f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080022fc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000014  08002310  00004014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002310  000040e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006524  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000149e  00000000  00000000  0000a568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  0000ba08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004ee  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001551b  00000000  00000000  0000c596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e0f  00000000  00000000  00021ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000852a5  00000000  00000000  000298c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aeb65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019c8  00000000  00000000  000aeba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b2  00000000  00000000  000b0570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000014 	.word	0x20000014
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080022c4 	.word	0x080022c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000018 	.word	0x20000018
 80001d0:	080022c4 	.word	0x080022c4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <ILI9341_Init>:
/**
 * @brief ILI9341 Initialization Function
 * @param None
 * @retval None
 */
void ILI9341_Init() {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	/* Reset The Screen */
	ILI9341_Reset();
 80004c8:	f000 f90e 	bl	80006e8 <ILI9341_Reset>
	ILI9341_Send_Command(SOFTWARE_RESET);
 80004cc:	2001      	movs	r0, #1
 80004ce:	f000 f9f9 	bl	80008c4 <ILI9341_Send_Command>

	/* Power Control A */
	ILI9341_Send_Command(0xCB);
 80004d2:	20cb      	movs	r0, #203	@ 0xcb
 80004d4:	f000 f9f6 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x39);
 80004d8:	2039      	movs	r0, #57	@ 0x39
 80004da:	f000 fa11 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2C);
 80004de:	202c      	movs	r0, #44	@ 0x2c
 80004e0:	f000 fa0e 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 80004e4:	2000      	movs	r0, #0
 80004e6:	f000 fa0b 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x34);
 80004ea:	2034      	movs	r0, #52	@ 0x34
 80004ec:	f000 fa08 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x02);
 80004f0:	2002      	movs	r0, #2
 80004f2:	f000 fa05 	bl	8000900 <ILI9341_Send_Data>

	/* Power Control B */
	ILI9341_Send_Command(0xCF);
 80004f6:	20cf      	movs	r0, #207	@ 0xcf
 80004f8:	f000 f9e4 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 f9ff 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8000502:	20c1      	movs	r0, #193	@ 0xc1
 8000504:	f000 f9fc 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x30);
 8000508:	2030      	movs	r0, #48	@ 0x30
 800050a:	f000 f9f9 	bl	8000900 <ILI9341_Send_Data>

	/* Driver timing control A */
	ILI9341_Send_Command(0xE8);
 800050e:	20e8      	movs	r0, #232	@ 0xe8
 8000510:	f000 f9d8 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x85);
 8000514:	2085      	movs	r0, #133	@ 0x85
 8000516:	f000 f9f3 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800051a:	2000      	movs	r0, #0
 800051c:	f000 f9f0 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x78);
 8000520:	2078      	movs	r0, #120	@ 0x78
 8000522:	f000 f9ed 	bl	8000900 <ILI9341_Send_Data>

	/* Driver timing control B */
	ILI9341_Send_Command(0xEA);
 8000526:	20ea      	movs	r0, #234	@ 0xea
 8000528:	f000 f9cc 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 800052c:	2000      	movs	r0, #0
 800052e:	f000 f9e7 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f9e4 	bl	8000900 <ILI9341_Send_Data>

	/* Power on Sequence control */
	ILI9341_Send_Command(0xED);
 8000538:	20ed      	movs	r0, #237	@ 0xed
 800053a:	f000 f9c3 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x64);
 800053e:	2064      	movs	r0, #100	@ 0x64
 8000540:	f000 f9de 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 8000544:	2003      	movs	r0, #3
 8000546:	f000 f9db 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x12);
 800054a:	2012      	movs	r0, #18
 800054c:	f000 f9d8 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x81);
 8000550:	2081      	movs	r0, #129	@ 0x81
 8000552:	f000 f9d5 	bl	8000900 <ILI9341_Send_Data>

	/* Pump ratio control */
	ILI9341_Send_Command(0xF7);
 8000556:	20f7      	movs	r0, #247	@ 0xf7
 8000558:	f000 f9b4 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x20);
 800055c:	2020      	movs	r0, #32
 800055e:	f000 f9cf 	bl	8000900 <ILI9341_Send_Data>

	/* Power Control 1 */
	ILI9341_Send_Command(POWER_CONTROL_1);
 8000562:	20c0      	movs	r0, #192	@ 0xc0
 8000564:	f000 f9ae 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000568:	2010      	movs	r0, #16
 800056a:	f000 f9c9 	bl	8000900 <ILI9341_Send_Data>

	/* Power Control 2 */
	ILI9341_Send_Command(POWER_CONTROL_2);
 800056e:	20c1      	movs	r0, #193	@ 0xc1
 8000570:	f000 f9a8 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x10);
 8000574:	2010      	movs	r0, #16
 8000576:	f000 f9c3 	bl	8000900 <ILI9341_Send_Data>

	/* VCOM Control 1 */
	ILI9341_Send_Command(VCOM_CONTROL_1);
 800057a:	20c5      	movs	r0, #197	@ 0xc5
 800057c:	f000 f9a2 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x3E);
 8000580:	203e      	movs	r0, #62	@ 0x3e
 8000582:	f000 f9bd 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x28);
 8000586:	2028      	movs	r0, #40	@ 0x28
 8000588:	f000 f9ba 	bl	8000900 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(VCOM_CONTROL_2);
 800058c:	20c7      	movs	r0, #199	@ 0xc7
 800058e:	f000 f999 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x86);
 8000592:	2086      	movs	r0, #134	@ 0x86
 8000594:	f000 f9b4 	bl	8000900 <ILI9341_Send_Data>

	/* VCOM Control 2 */
	ILI9341_Send_Command(0x36);
 8000598:	2036      	movs	r0, #54	@ 0x36
 800059a:	f000 f993 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x48);
 800059e:	2048      	movs	r0, #72	@ 0x48
 80005a0:	f000 f9ae 	bl	8000900 <ILI9341_Send_Data>

	/* Pixel Format Set */
	ILI9341_Send_Command(PIXEL_FORMAT_SET);
 80005a4:	203a      	movs	r0, #58	@ 0x3a
 80005a6:	f000 f98d 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x55);    //16bit
 80005aa:	2055      	movs	r0, #85	@ 0x55
 80005ac:	f000 f9a8 	bl	8000900 <ILI9341_Send_Data>

	/* Normal Mode for Frame Control */
	ILI9341_Send_Command(FRAME_CONTROL_NORMAL_MODE);
 80005b0:	20b1      	movs	r0, #177	@ 0xb1
 80005b2:	f000 f987 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 f9a2 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x18);
 80005bc:	2018      	movs	r0, #24
 80005be:	f000 f99f 	bl	8000900 <ILI9341_Send_Data>

	/* Display Function Control */
	ILI9341_Send_Command(DISPLAY_FUNCTION_CONTROL);
 80005c2:	20b6      	movs	r0, #182	@ 0xb6
 80005c4:	f000 f97e 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x08);
 80005c8:	2008      	movs	r0, #8
 80005ca:	f000 f999 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x82);
 80005ce:	2082      	movs	r0, #130	@ 0x82
 80005d0:	f000 f996 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x27);
 80005d4:	2027      	movs	r0, #39	@ 0x27
 80005d6:	f000 f993 	bl	8000900 <ILI9341_Send_Data>

	/* 3GAMMA FUNCTION DISABLE */
	ILI9341_Send_Command(0xF2);
 80005da:	20f2      	movs	r0, #242	@ 0xf2
 80005dc:	f000 f972 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 80005e0:	2000      	movs	r0, #0
 80005e2:	f000 f98d 	bl	8000900 <ILI9341_Send_Data>

	/* GAMMA CURVE SELECTED */
	ILI9341_Send_Command(0x26); //Gamma set
 80005e6:	2026      	movs	r0, #38	@ 0x26
 80005e8:	f000 f96c 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x01); 	//Gamma Curve (G2.2)
 80005ec:	2001      	movs	r0, #1
 80005ee:	f000 f987 	bl	8000900 <ILI9341_Send_Data>

	//Positive Gamma  Correction
	ILI9341_Send_Command(0xE0);
 80005f2:	20e0      	movs	r0, #224	@ 0xe0
 80005f4:	f000 f966 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x0F);
 80005f8:	200f      	movs	r0, #15
 80005fa:	f000 f981 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80005fe:	2031      	movs	r0, #49	@ 0x31
 8000600:	f000 f97e 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x2B);
 8000604:	202b      	movs	r0, #43	@ 0x2b
 8000606:	f000 f97b 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800060a:	200c      	movs	r0, #12
 800060c:	f000 f978 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000610:	200e      	movs	r0, #14
 8000612:	f000 f975 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 8000616:	2008      	movs	r0, #8
 8000618:	f000 f972 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x4E);
 800061c:	204e      	movs	r0, #78	@ 0x4e
 800061e:	f000 f96f 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xF1);
 8000622:	20f1      	movs	r0, #241	@ 0xf1
 8000624:	f000 f96c 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x37);
 8000628:	2037      	movs	r0, #55	@ 0x37
 800062a:	f000 f969 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 800062e:	2007      	movs	r0, #7
 8000630:	f000 f966 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x10);
 8000634:	2010      	movs	r0, #16
 8000636:	f000 f963 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800063a:	2003      	movs	r0, #3
 800063c:	f000 f960 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 8000640:	200e      	movs	r0, #14
 8000642:	f000 f95d 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x09);
 8000646:	2009      	movs	r0, #9
 8000648:	f000 f95a 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x00);
 800064c:	2000      	movs	r0, #0
 800064e:	f000 f957 	bl	8000900 <ILI9341_Send_Data>

	//Negative Gamma  Correction
	ILI9341_Send_Command(0xE1);
 8000652:	20e1      	movs	r0, #225	@ 0xe1
 8000654:	f000 f936 	bl	80008c4 <ILI9341_Send_Command>
	ILI9341_Send_Data(0x00);
 8000658:	2000      	movs	r0, #0
 800065a:	f000 f951 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0E);
 800065e:	200e      	movs	r0, #14
 8000660:	f000 f94e 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x14);
 8000664:	2014      	movs	r0, #20
 8000666:	f000 f94b 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x03);
 800066a:	2003      	movs	r0, #3
 800066c:	f000 f948 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x11);
 8000670:	2011      	movs	r0, #17
 8000672:	f000 f945 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x07);
 8000676:	2007      	movs	r0, #7
 8000678:	f000 f942 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 800067c:	2031      	movs	r0, #49	@ 0x31
 800067e:	f000 f93f 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0xC1);
 8000682:	20c1      	movs	r0, #193	@ 0xc1
 8000684:	f000 f93c 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x48);
 8000688:	2048      	movs	r0, #72	@ 0x48
 800068a:	f000 f939 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x08);
 800068e:	2008      	movs	r0, #8
 8000690:	f000 f936 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 8000694:	200f      	movs	r0, #15
 8000696:	f000 f933 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0C);
 800069a:	200c      	movs	r0, #12
 800069c:	f000 f930 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x31);
 80006a0:	2031      	movs	r0, #49	@ 0x31
 80006a2:	f000 f92d 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x36);
 80006a6:	2036      	movs	r0, #54	@ 0x36
 80006a8:	f000 f92a 	bl	8000900 <ILI9341_Send_Data>
	ILI9341_Send_Data(0x0F);
 80006ac:	200f      	movs	r0, #15
 80006ae:	f000 f927 	bl	8000900 <ILI9341_Send_Data>

	//EXIT SLEEP
	ILI9341_Send_Command(SLEEP_OUT);
 80006b2:	2011      	movs	r0, #17
 80006b4:	f000 f906 	bl	80008c4 <ILI9341_Send_Command>

	//TURN ON DISPLAY
	ILI9341_Send_Command(DISPLAY_ON);
 80006b8:	2029      	movs	r0, #41	@ 0x29
 80006ba:	f000 f903 	bl	80008c4 <ILI9341_Send_Command>
//	ILI9341_Send_Data(0x2C);
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <ILI9341_SPI_Send>:

void ILI9341_SPI_Send(unsigned char data)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&lcd_spi, &data, 1, 1);
 80006ce:	1df9      	adds	r1, r7, #7
 80006d0:	2301      	movs	r3, #1
 80006d2:	2201      	movs	r2, #1
 80006d4:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <ILI9341_SPI_Send+0x20>)
 80006d6:	f001 fba8 	bl	8001e2a <HAL_SPI_Transmit>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000030 	.word	0x20000030

080006e8 <ILI9341_Reset>:

/**
  * @brief  Reset hardware and software for ILI9341
  * @retval None
  */
void ILI9341_Reset() {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	RESET_ON;
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	480e      	ldr	r0, [pc, #56]	@ (800072c <ILI9341_Reset+0x44>)
 80006f2:	f000 fed3 	bl	800149c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006f6:	2064      	movs	r0, #100	@ 0x64
 80006f8:	f000 fc42 	bl	8000f80 <HAL_Delay>
	RESET_OFF;
 80006fc:	2201      	movs	r2, #1
 80006fe:	2101      	movs	r1, #1
 8000700:	480a      	ldr	r0, [pc, #40]	@ (800072c <ILI9341_Reset+0x44>)
 8000702:	f000 fecb 	bl	800149c <HAL_GPIO_WritePin>
	CS_ON;			// possible error
 8000706:	2200      	movs	r2, #0
 8000708:	2104      	movs	r1, #4
 800070a:	4808      	ldr	r0, [pc, #32]	@ (800072c <ILI9341_Reset+0x44>)
 800070c:	f000 fec6 	bl	800149c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000710:	2064      	movs	r0, #100	@ 0x64
 8000712:	f000 fc35 	bl	8000f80 <HAL_Delay>
	ILI9341_Send_Command(SOFTWARE_RESET);
 8000716:	2001      	movs	r0, #1
 8000718:	f000 f8d4 	bl	80008c4 <ILI9341_Send_Command>
	CS_OFF;
 800071c:	2201      	movs	r2, #1
 800071e:	2104      	movs	r1, #4
 8000720:	4802      	ldr	r0, [pc, #8]	@ (800072c <ILI9341_Reset+0x44>)
 8000722:	f000 febb 	bl	800149c <HAL_GPIO_WritePin>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40020000 	.word	0x40020000

08000730 <ILI9341_Set_Rotation>:

void ILI9341_Set_Rotation(unsigned char rotation) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
	ILI9341_Send_Command(0x36);
 800073a:	2036      	movs	r0, #54	@ 0x36
 800073c:	f000 f8c2 	bl	80008c4 <ILI9341_Send_Command>
	switch (rotation) {
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d836      	bhi.n	80007b4 <ILI9341_Set_Rotation+0x84>
 8000746:	a201      	add	r2, pc, #4	@ (adr r2, 800074c <ILI9341_Set_Rotation+0x1c>)
 8000748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074c:	0800075d 	.word	0x0800075d
 8000750:	08000773 	.word	0x08000773
 8000754:	08000789 	.word	0x08000789
 8000758:	0800079f 	.word	0x0800079f
	case 0:
		ILI9341_Send_Data(0x48);
 800075c:	2048      	movs	r0, #72	@ 0x48
 800075e:	f000 f8cf 	bl	8000900 <ILI9341_Send_Data>
		X_SIZE = 240;
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <ILI9341_Set_Rotation+0x8c>)
 8000764:	22f0      	movs	r2, #240	@ 0xf0
 8000766:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000768:	4b15      	ldr	r3, [pc, #84]	@ (80007c0 <ILI9341_Set_Rotation+0x90>)
 800076a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800076e:	601a      	str	r2, [r3, #0]
		break;
 8000770:	e020      	b.n	80007b4 <ILI9341_Set_Rotation+0x84>
	case 1:
		ILI9341_Send_Data(0x28);
 8000772:	2028      	movs	r0, #40	@ 0x28
 8000774:	f000 f8c4 	bl	8000900 <ILI9341_Send_Data>
		X_SIZE = 320;
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <ILI9341_Set_Rotation+0x8c>)
 800077a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800077e:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <ILI9341_Set_Rotation+0x90>)
 8000782:	22f0      	movs	r2, #240	@ 0xf0
 8000784:	601a      	str	r2, [r3, #0]
		break;
 8000786:	e015      	b.n	80007b4 <ILI9341_Set_Rotation+0x84>
	case 2:
		ILI9341_Send_Data(0x88);
 8000788:	2088      	movs	r0, #136	@ 0x88
 800078a:	f000 f8b9 	bl	8000900 <ILI9341_Send_Data>
		X_SIZE = 240;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <ILI9341_Set_Rotation+0x8c>)
 8000790:	22f0      	movs	r2, #240	@ 0xf0
 8000792:	601a      	str	r2, [r3, #0]
		Y_SIZE = 320;
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <ILI9341_Set_Rotation+0x90>)
 8000796:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e00a      	b.n	80007b4 <ILI9341_Set_Rotation+0x84>
	case 3:
		ILI9341_Send_Data(0xE8);
 800079e:	20e8      	movs	r0, #232	@ 0xe8
 80007a0:	f000 f8ae 	bl	8000900 <ILI9341_Send_Data>
		X_SIZE = 320;
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <ILI9341_Set_Rotation+0x8c>)
 80007a6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80007aa:	601a      	str	r2, [r3, #0]
		Y_SIZE = 240;
 80007ac:	4b04      	ldr	r3, [pc, #16]	@ (80007c0 <ILI9341_Set_Rotation+0x90>)
 80007ae:	22f0      	movs	r2, #240	@ 0xf0
 80007b0:	601a      	str	r2, [r3, #0]
		break;
 80007b2:	bf00      	nop
	}
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000004 	.word	0x20000004

080007c4 <ILI9341_SPI_Send_32>:

void ILI9341_SPI_Send_32(unsigned char command, unsigned long data) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	71fb      	strb	r3, [r7, #7]
	CS_ON;
 80007d0:	2200      	movs	r2, #0
 80007d2:	2104      	movs	r1, #4
 80007d4:	4815      	ldr	r0, [pc, #84]	@ (800082c <ILI9341_SPI_Send_32+0x68>)
 80007d6:	f000 fe61 	bl	800149c <HAL_GPIO_WritePin>
	DC_COMMAND;
 80007da:	2200      	movs	r2, #0
 80007dc:	2102      	movs	r1, #2
 80007de:	4813      	ldr	r0, [pc, #76]	@ (800082c <ILI9341_SPI_Send_32+0x68>)
 80007e0:	f000 fe5c 	bl	800149c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff6c 	bl	80006c4 <ILI9341_SPI_Send>

	DC_DATA;
 80007ec:	2201      	movs	r2, #1
 80007ee:	2102      	movs	r1, #2
 80007f0:	480e      	ldr	r0, [pc, #56]	@ (800082c <ILI9341_SPI_Send_32+0x68>)
 80007f2:	f000 fe53 	bl	800149c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data >> 24);
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	0e1b      	lsrs	r3, r3, #24
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ff61 	bl	80006c4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 16);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	0c1b      	lsrs	r3, r3, #16
 8000806:	b2db      	uxtb	r3, r3
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff ff5b 	bl	80006c4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data >> 8);
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	0a1b      	lsrs	r3, r3, #8
 8000812:	b2db      	uxtb	r3, r3
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff55 	bl	80006c4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(data);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff50 	bl	80006c4 <ILI9341_SPI_Send>

}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40020000 	.word	0x40020000

08000830 <ILI9341_Set_Address>:

void ILI9341_Set_Address(unsigned int x1, unsigned int y1, unsigned int x2, unsigned int y2) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	603b      	str	r3, [r7, #0]
	unsigned long t;
	t = x1;
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	617b      	str	r3, [r7, #20]
	t <<= 16;
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	041b      	lsls	r3, r3, #16
 8000846:	617b      	str	r3, [r7, #20]
	t |= x2;
 8000848:	697a      	ldr	r2, [r7, #20]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4313      	orrs	r3, r2
 800084e:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2A, t); //Column Addres Set
 8000850:	6979      	ldr	r1, [r7, #20]
 8000852:	202a      	movs	r0, #42	@ 0x2a
 8000854:	f7ff ffb6 	bl	80007c4 <ILI9341_SPI_Send_32>
	t = y1;
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	617b      	str	r3, [r7, #20]
	t <<= 16;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	041b      	lsls	r3, r3, #16
 8000860:	617b      	str	r3, [r7, #20]
	t |= y2;
 8000862:	697a      	ldr	r2, [r7, #20]
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	4313      	orrs	r3, r2
 8000868:	617b      	str	r3, [r7, #20]
	ILI9341_SPI_Send_32(0x2B, t); //Page Addres Set
 800086a:	6979      	ldr	r1, [r7, #20]
 800086c:	202b      	movs	r0, #43	@ 0x2b
 800086e:	f7ff ffa9 	bl	80007c4 <ILI9341_SPI_Send_32>
}
 8000872:	bf00      	nop
 8000874:	3718      	adds	r7, #24
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <ILI9341_Fill_Screen>:

void ILI9341_Fill_Screen(unsigned int color)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	ILI9341_Set_Address(0, 0, X_SIZE-1, Y_SIZE-1);
 8000884:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <ILI9341_Fill_Screen+0x40>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	1e5a      	subs	r2, r3, #1
 800088a:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <ILI9341_Fill_Screen+0x44>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	3b01      	subs	r3, #1
 8000890:	2100      	movs	r1, #0
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff ffcc 	bl	8000830 <ILI9341_Set_Address>
	ILI9341_Send_Burst(color, (long)X_SIZE * (long)Y_SIZE);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	b29b      	uxth	r3, r3
 800089c:	4a07      	ldr	r2, [pc, #28]	@ (80008bc <ILI9341_Fill_Screen+0x40>)
 800089e:	6812      	ldr	r2, [r2, #0]
 80008a0:	4611      	mov	r1, r2
 80008a2:	4a07      	ldr	r2, [pc, #28]	@ (80008c0 <ILI9341_Fill_Screen+0x44>)
 80008a4:	6812      	ldr	r2, [r2, #0]
 80008a6:	fb01 f202 	mul.w	r2, r1, r2
 80008aa:	4611      	mov	r1, r2
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 f845 	bl	800093c <ILI9341_Send_Burst>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000004 	.word	0x20000004

080008c4 <ILI9341_Send_Command>:
		}
	break;
	}
}

static void ILI9341_Send_Command(unsigned char command) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
	DC_COMMAND;
 80008ce:	2200      	movs	r2, #0
 80008d0:	2102      	movs	r1, #2
 80008d2:	480a      	ldr	r0, [pc, #40]	@ (80008fc <ILI9341_Send_Command+0x38>)
 80008d4:	f000 fde2 	bl	800149c <HAL_GPIO_WritePin>
	CS_ON;
 80008d8:	2200      	movs	r2, #0
 80008da:	2104      	movs	r1, #4
 80008dc:	4807      	ldr	r0, [pc, #28]	@ (80008fc <ILI9341_Send_Command+0x38>)
 80008de:	f000 fddd 	bl	800149c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(command);
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff feed 	bl	80006c4 <ILI9341_SPI_Send>
	CS_OFF;
 80008ea:	2201      	movs	r2, #1
 80008ec:	2104      	movs	r1, #4
 80008ee:	4803      	ldr	r0, [pc, #12]	@ (80008fc <ILI9341_Send_Command+0x38>)
 80008f0:	f000 fdd4 	bl	800149c <HAL_GPIO_WritePin>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40020000 	.word	0x40020000

08000900 <ILI9341_Send_Data>:

static void ILI9341_Send_Data(unsigned char data) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
	DC_DATA;
 800090a:	2201      	movs	r2, #1
 800090c:	2102      	movs	r1, #2
 800090e:	480a      	ldr	r0, [pc, #40]	@ (8000938 <ILI9341_Send_Data+0x38>)
 8000910:	f000 fdc4 	bl	800149c <HAL_GPIO_WritePin>
	CS_ON;
 8000914:	2200      	movs	r2, #0
 8000916:	2104      	movs	r1, #4
 8000918:	4807      	ldr	r0, [pc, #28]	@ (8000938 <ILI9341_Send_Data+0x38>)
 800091a:	f000 fdbf 	bl	800149c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(data);
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fecf 	bl	80006c4 <ILI9341_SPI_Send>
	CS_OFF;
 8000926:	2201      	movs	r2, #1
 8000928:	2104      	movs	r1, #4
 800092a:	4803      	ldr	r0, [pc, #12]	@ (8000938 <ILI9341_Send_Data+0x38>)
 800092c:	f000 fdb6 	bl	800149c <HAL_GPIO_WritePin>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40020000 	.word	0x40020000

0800093c <ILI9341_Send_Burst>:

static void ILI9341_Send_Burst(unsigned short color, unsigned long len)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	6039      	str	r1, [r7, #0]
 8000946:	80fb      	strh	r3, [r7, #6]
	unsigned short blocks;
	unsigned char i, high_bit = color >> 8, low_bit = color;
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	0a1b      	lsrs	r3, r3, #8
 800094c:	b29b      	uxth	r3, r3
 800094e:	733b      	strb	r3, [r7, #12]
 8000950:	88fb      	ldrh	r3, [r7, #6]
 8000952:	72fb      	strb	r3, [r7, #11]
	CS_ON;
 8000954:	2200      	movs	r2, #0
 8000956:	2104      	movs	r1, #4
 8000958:	4856      	ldr	r0, [pc, #344]	@ (8000ab4 <ILI9341_Send_Burst+0x178>)
 800095a:	f000 fd9f 	bl	800149c <HAL_GPIO_WritePin>
	DC_COMMAND;
 800095e:	2200      	movs	r2, #0
 8000960:	2102      	movs	r1, #2
 8000962:	4854      	ldr	r0, [pc, #336]	@ (8000ab4 <ILI9341_Send_Burst+0x178>)
 8000964:	f000 fd9a 	bl	800149c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(0x2C);
 8000968:	202c      	movs	r0, #44	@ 0x2c
 800096a:	f7ff feab 	bl	80006c4 <ILI9341_SPI_Send>
	DC_DATA;
 800096e:	2201      	movs	r2, #1
 8000970:	2102      	movs	r1, #2
 8000972:	4850      	ldr	r0, [pc, #320]	@ (8000ab4 <ILI9341_Send_Burst+0x178>)
 8000974:	f000 fd92 	bl	800149c <HAL_GPIO_WritePin>
	ILI9341_SPI_Send(high_bit);
 8000978:	7b3b      	ldrb	r3, [r7, #12]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fea2 	bl	80006c4 <ILI9341_SPI_Send>
	ILI9341_SPI_Send(low_bit);
 8000980:	7afb      	ldrb	r3, [r7, #11]
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff fe9e 	bl	80006c4 <ILI9341_SPI_Send>
	len--;
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	3b01      	subs	r3, #1
 800098c:	603b      	str	r3, [r7, #0]
	blocks = (unsigned short) (len / 64); //64 pixels/block
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	099b      	lsrs	r3, r3, #6
 8000992:	81fb      	strh	r3, [r7, #14]
	if (high_bit == low_bit)
 8000994:	7b3a      	ldrb	r2, [r7, #12]
 8000996:	7afb      	ldrb	r3, [r7, #11]
 8000998:	429a      	cmp	r2, r3
 800099a:	d169      	bne.n	8000a70 <ILI9341_Send_Burst+0x134>
	{
		while (blocks--) {
 800099c:	e027      	b.n	80009ee <ILI9341_Send_Burst+0xb2>
			i = 16;
 800099e:	2310      	movs	r3, #16
 80009a0:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(low_bit);
 80009a2:	7afb      	ldrb	r3, [r7, #11]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fe8d 	bl	80006c4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80009aa:	7afb      	ldrb	r3, [r7, #11]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe89 	bl	80006c4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80009b2:	7afb      	ldrb	r3, [r7, #11]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fe85 	bl	80006c4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80009ba:	7afb      	ldrb	r3, [r7, #11]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fe81 	bl	80006c4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80009c2:	7afb      	ldrb	r3, [r7, #11]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe7d 	bl	80006c4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80009ca:	7afb      	ldrb	r3, [r7, #11]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff fe79 	bl	80006c4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80009d2:	7afb      	ldrb	r3, [r7, #11]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fe75 	bl	80006c4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 80009da:	7afb      	ldrb	r3, [r7, #11]
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fe71 	bl	80006c4 <ILI9341_SPI_Send>
			} while (--i);
 80009e2:	7b7b      	ldrb	r3, [r7, #13]
 80009e4:	3b01      	subs	r3, #1
 80009e6:	737b      	strb	r3, [r7, #13]
 80009e8:	7b7b      	ldrb	r3, [r7, #13]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d1d9      	bne.n	80009a2 <ILI9341_Send_Burst+0x66>
		while (blocks--) {
 80009ee:	89fb      	ldrh	r3, [r7, #14]
 80009f0:	1e5a      	subs	r2, r3, #1
 80009f2:	81fa      	strh	r2, [r7, #14]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d1d2      	bne.n	800099e <ILI9341_Send_Burst+0x62>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a00:	737b      	strb	r3, [r7, #13]
 8000a02:	e007      	b.n	8000a14 <ILI9341_Send_Burst+0xd8>
			ILI9341_SPI_Send(low_bit);
 8000a04:	7afb      	ldrb	r3, [r7, #11]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fe5c 	bl	80006c4 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000a0c:	7afb      	ldrb	r3, [r7, #11]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fe58 	bl	80006c4 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000a14:	7b7b      	ldrb	r3, [r7, #13]
 8000a16:	1e5a      	subs	r2, r3, #1
 8000a18:	737a      	strb	r2, [r7, #13]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1f2      	bne.n	8000a04 <ILI9341_Send_Burst+0xc8>
 8000a1e:	e03f      	b.n	8000aa0 <ILI9341_Send_Burst+0x164>
		}
	}
	else
	{
		while (blocks--) {
			i = 16;
 8000a20:	2310      	movs	r3, #16
 8000a22:	737b      	strb	r3, [r7, #13]
			do {
				ILI9341_SPI_Send(high_bit);
 8000a24:	7b3b      	ldrb	r3, [r7, #12]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fe4c 	bl	80006c4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000a2c:	7afb      	ldrb	r3, [r7, #11]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fe48 	bl	80006c4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000a34:	7b3b      	ldrb	r3, [r7, #12]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fe44 	bl	80006c4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000a3c:	7afb      	ldrb	r3, [r7, #11]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff fe40 	bl	80006c4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000a44:	7b3b      	ldrb	r3, [r7, #12]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fe3c 	bl	80006c4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000a4c:	7afb      	ldrb	r3, [r7, #11]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fe38 	bl	80006c4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(high_bit);
 8000a54:	7b3b      	ldrb	r3, [r7, #12]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff fe34 	bl	80006c4 <ILI9341_SPI_Send>
				ILI9341_SPI_Send(low_bit);
 8000a5c:	7afb      	ldrb	r3, [r7, #11]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff fe30 	bl	80006c4 <ILI9341_SPI_Send>
			} while (--i);
 8000a64:	7b7b      	ldrb	r3, [r7, #13]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	737b      	strb	r3, [r7, #13]
 8000a6a:	7b7b      	ldrb	r3, [r7, #13]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d1d9      	bne.n	8000a24 <ILI9341_Send_Burst+0xe8>
		while (blocks--) {
 8000a70:	89fb      	ldrh	r3, [r7, #14]
 8000a72:	1e5a      	subs	r2, r3, #1
 8000a74:	81fa      	strh	r2, [r7, #14]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d1d2      	bne.n	8000a20 <ILI9341_Send_Burst+0xe4>
		}
		//Fill any remaining pixels(1 to 64)
		for (i = (unsigned char) len & 63; i--;) {
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a82:	737b      	strb	r3, [r7, #13]
 8000a84:	e007      	b.n	8000a96 <ILI9341_Send_Burst+0x15a>
			ILI9341_SPI_Send(high_bit);
 8000a86:	7b3b      	ldrb	r3, [r7, #12]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fe1b 	bl	80006c4 <ILI9341_SPI_Send>
			ILI9341_SPI_Send(low_bit);
 8000a8e:	7afb      	ldrb	r3, [r7, #11]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fe17 	bl	80006c4 <ILI9341_SPI_Send>
		for (i = (unsigned char) len & 63; i--;) {
 8000a96:	7b7b      	ldrb	r3, [r7, #13]
 8000a98:	1e5a      	subs	r2, r3, #1
 8000a9a:	737a      	strb	r2, [r7, #13]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d1f2      	bne.n	8000a86 <ILI9341_Send_Burst+0x14a>
		}
	}
	CS_OFF;
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	4803      	ldr	r0, [pc, #12]	@ (8000ab4 <ILI9341_Send_Burst+0x178>)
 8000aa6:	f000 fcf9 	bl	800149c <HAL_GPIO_WritePin>
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abc:	f000 f9ee 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac0:	f000 f816 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac4:	f000 f8b6 	bl	8000c34 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ac8:	f000 f87e 	bl	8000bc8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // Initialization the TFT screen
  ILI9341_Init();
 8000acc:	f7ff fcfa 	bl	80004c4 <ILI9341_Init>

  ILI9341_Set_Rotation(0);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f7ff fe2d 	bl	8000730 <ILI9341_Set_Rotation>
//  HAL_Delay(500);
//  ILI9341_Fill_Screen(GREEN);
//  HAL_Delay(500);
//  ILI9341_Fill_Screen(BLUE);
//  HAL_Delay(500);
	ILI9341_Fill_Screen(BLACK);
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff fed0 	bl	800087c <ILI9341_Fill_Screen>
	HAL_Delay(500);
 8000adc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ae0:	f000 fa4e 	bl	8000f80 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		  HAL_Delay(500);
 8000ae4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ae8:	f000 fa4a 	bl	8000f80 <HAL_Delay>
 8000aec:	e7fa      	b.n	8000ae4 <main+0x2c>
	...

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b094      	sub	sp, #80	@ 0x50
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	2230      	movs	r2, #48	@ 0x30
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f001 fbb4 	bl	800226c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	4b29      	ldr	r3, [pc, #164]	@ (8000bc0 <SystemClock_Config+0xd0>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	4a28      	ldr	r2, [pc, #160]	@ (8000bc0 <SystemClock_Config+0xd0>)
 8000b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b24:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <SystemClock_Config+0xd0>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	4b23      	ldr	r3, [pc, #140]	@ (8000bc4 <SystemClock_Config+0xd4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b3c:	4a21      	ldr	r2, [pc, #132]	@ (8000bc4 <SystemClock_Config+0xd4>)
 8000b3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc4 <SystemClock_Config+0xd4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b50:	2301      	movs	r3, #1
 8000b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b64:	2319      	movs	r3, #25
 8000b66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b68:	23a8      	movs	r3, #168	@ 0xa8
 8000b6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b74:	f107 0320 	add.w	r3, r7, #32
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fca9 	bl	80014d0 <HAL_RCC_OscConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b84:	f000 f8a8 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b88:	230f      	movs	r3, #15
 8000b8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 ff0a 	bl	80019c0 <HAL_RCC_ClockConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bb2:	f000 f891 	bl	8000cd8 <Error_Handler>
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3750      	adds	r7, #80	@ 0x50
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40007000 	.word	0x40007000

08000bc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bce:	4a18      	ldr	r2, [pc, #96]	@ (8000c30 <MX_SPI1_Init+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c06:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c12:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c14:	220a      	movs	r2, #10
 8000c16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <MX_SPI1_Init+0x64>)
 8000c1a:	f001 f87d 	bl	8001d18 <HAL_SPI_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c24:	f000 f858 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000088 	.word	0x20000088
 8000c30:	40013000 	.word	0x40013000

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b088      	sub	sp, #32
 8000c38:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	4b24      	ldr	r3, [pc, #144]	@ (8000cd0 <MX_GPIO_Init+0x9c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a23      	ldr	r2, [pc, #140]	@ (8000cd0 <MX_GPIO_Init+0x9c>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <MX_GPIO_Init+0x9c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <MX_GPIO_Init+0x9c>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cd0 <MX_GPIO_Init+0x9c>)
 8000c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c66:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_GPIO_Init+0x9c>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_GPIO_Init+0x9c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	4a15      	ldr	r2, [pc, #84]	@ (8000cd0 <MX_GPIO_Init+0x9c>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_GPIO_Init+0x9c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitTypeDef GPIO_InitStruct;

// TFT Display GPIO related Initialization
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2101      	movs	r1, #1
 8000c92:	4810      	ldr	r0, [pc, #64]	@ (8000cd4 <MX_GPIO_Init+0xa0>)
 8000c94:	f000 fc02 	bl	800149c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	480d      	ldr	r0, [pc, #52]	@ (8000cd4 <MX_GPIO_Init+0xa0>)
 8000c9e:	f000 fbfd 	bl	800149c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	480b      	ldr	r0, [pc, #44]	@ (8000cd4 <MX_GPIO_Init+0xa0>)
 8000ca8:	f000 fbf8 	bl	800149c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RESET_Pin, DC_Pin and CS_Pin*/
  GPIO_InitStruct.Pin = RESET_Pin | DC_Pin | CS_Pin;
 8000cac:	2307      	movs	r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <MX_GPIO_Init+0xa0>)
 8000cc4:	f000 fa66 	bl	8001194 <HAL_GPIO_Init>

// TFT Touch GPIO related Initialization

/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc8:	bf00      	nop
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <Error_Handler+0x8>

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a08      	ldr	r2, [pc, #32]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	@ 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	@ (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12b      	bne.n	8000dae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	4a17      	ldr	r2, [pc, #92]	@ (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	@ (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TFT_SCK_Pin|TFT_MISO_Pin|TFT_MOSI_Pin;
 8000d8e:	23e0      	movs	r3, #224	@ 0xe0
 8000d90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9e:	2305      	movs	r3, #5
 8000da0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <HAL_SPI_MspInit+0x8c>)
 8000daa:	f000 f9f3 	bl	8001194 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000dae:	bf00      	nop
 8000db0:	3728      	adds	r7, #40	@ 0x28
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40013000 	.word	0x40013000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <NMI_Handler+0x4>

08000dcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <MemManage_Handler+0x4>

08000ddc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1a:	f000 f891 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	@ (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e4c:	f7ff ffea 	bl	8000e24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e50:	480c      	ldr	r0, [pc, #48]	@ (8000e84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e52:	490d      	ldr	r1, [pc, #52]	@ (8000e88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e54:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e68:	4c0a      	ldr	r4, [pc, #40]	@ (8000e94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f001 fa01 	bl	800227c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fe1d 	bl	8000ab8 <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e8c:	080022fc 	.word	0x080022fc
  ldr r2, =_sbss
 8000e90:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e94:	200000e4 	.word	0x200000e4

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <HAL_Init+0x40>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eac:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000edc <HAL_Init+0x40>)
 8000eb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	@ (8000edc <HAL_Init+0x40>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 f931 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	200f      	movs	r0, #15
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff ff08 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023c00 	.word	0x40023c00

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f93b 	bl	800117a <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 f911 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	@ (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000010 	.word	0x20000010
 8000f3c:	2000000c 	.word	0x2000000c

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	@ (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000010 	.word	0x20000010
 8000f64:	200000e0 	.word	0x200000e0

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200000e0 	.word	0x200000e0

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ffee 	bl	8000f68 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffde 	bl	8000f68 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000010 	.word	0x20000010

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	@ (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	60d3      	str	r3, [r2, #12]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	@ (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	@ (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	@ (800107c <__NVIC_SetPriority+0x50>)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	@ 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	@ 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff47 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff5c 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff8e 	bl	8001080 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5d 	bl	800102c <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffb0 	bl	80010e8 <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	e159      	b.n	8001464 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011b0:	2201      	movs	r2, #1
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	f040 8148 	bne.w	800145e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d005      	beq.n	80011e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d130      	bne.n	8001248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	2203      	movs	r2, #3
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121c:	2201      	movs	r2, #1
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	091b      	lsrs	r3, r3, #4
 8001232:	f003 0201 	and.w	r2, r3, #1
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b03      	cmp	r3, #3
 8001252:	d017      	beq.n	8001284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	2203      	movs	r2, #3
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d123      	bne.n	80012d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	220f      	movs	r2, #15
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	691a      	ldr	r2, [r3, #16]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	08da      	lsrs	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3208      	adds	r2, #8
 80012d2:	69b9      	ldr	r1, [r7, #24]
 80012d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4013      	ands	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 0203 	and.w	r2, r3, #3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4313      	orrs	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80a2 	beq.w	800145e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b57      	ldr	r3, [pc, #348]	@ (800147c <HAL_GPIO_Init+0x2e8>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	4a56      	ldr	r2, [pc, #344]	@ (800147c <HAL_GPIO_Init+0x2e8>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001328:	6453      	str	r3, [r2, #68]	@ 0x44
 800132a:	4b54      	ldr	r3, [pc, #336]	@ (800147c <HAL_GPIO_Init+0x2e8>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001336:	4a52      	ldr	r2, [pc, #328]	@ (8001480 <HAL_GPIO_Init+0x2ec>)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a49      	ldr	r2, [pc, #292]	@ (8001484 <HAL_GPIO_Init+0x2f0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d019      	beq.n	8001396 <HAL_GPIO_Init+0x202>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a48      	ldr	r2, [pc, #288]	@ (8001488 <HAL_GPIO_Init+0x2f4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d013      	beq.n	8001392 <HAL_GPIO_Init+0x1fe>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a47      	ldr	r2, [pc, #284]	@ (800148c <HAL_GPIO_Init+0x2f8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d00d      	beq.n	800138e <HAL_GPIO_Init+0x1fa>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a46      	ldr	r2, [pc, #280]	@ (8001490 <HAL_GPIO_Init+0x2fc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d007      	beq.n	800138a <HAL_GPIO_Init+0x1f6>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a45      	ldr	r2, [pc, #276]	@ (8001494 <HAL_GPIO_Init+0x300>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_GPIO_Init+0x1f2>
 8001382:	2304      	movs	r3, #4
 8001384:	e008      	b.n	8001398 <HAL_GPIO_Init+0x204>
 8001386:	2307      	movs	r3, #7
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x204>
 800138a:	2303      	movs	r3, #3
 800138c:	e004      	b.n	8001398 <HAL_GPIO_Init+0x204>
 800138e:	2302      	movs	r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x204>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x204>
 8001396:	2300      	movs	r3, #0
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a8:	4935      	ldr	r1, [pc, #212]	@ (8001480 <HAL_GPIO_Init+0x2ec>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b6:	4b38      	ldr	r3, [pc, #224]	@ (8001498 <HAL_GPIO_Init+0x304>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013da:	4a2f      	ldr	r2, [pc, #188]	@ (8001498 <HAL_GPIO_Init+0x304>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001498 <HAL_GPIO_Init+0x304>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001404:	4a24      	ldr	r2, [pc, #144]	@ (8001498 <HAL_GPIO_Init+0x304>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800140a:	4b23      	ldr	r3, [pc, #140]	@ (8001498 <HAL_GPIO_Init+0x304>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142e:	4a1a      	ldr	r2, [pc, #104]	@ (8001498 <HAL_GPIO_Init+0x304>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001434:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <HAL_GPIO_Init+0x304>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001458:	4a0f      	ldr	r2, [pc, #60]	@ (8001498 <HAL_GPIO_Init+0x304>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	f67f aea2 	bls.w	80011b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3724      	adds	r7, #36	@ 0x24
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40013800 	.word	0x40013800
 8001484:	40020000 	.word	0x40020000
 8001488:	40020400 	.word	0x40020400
 800148c:	40020800 	.word	0x40020800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40021000 	.word	0x40021000
 8001498:	40013c00 	.word	0x40013c00

0800149c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
 80014a8:	4613      	mov	r3, r2
 80014aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014ac:	787b      	ldrb	r3, [r7, #1]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014b8:	e003      	b.n	80014c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	041a      	lsls	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	619a      	str	r2, [r3, #24]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e267      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d075      	beq.n	80015da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80014ee:	4b88      	ldr	r3, [pc, #544]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	d00c      	beq.n	8001514 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fa:	4b85      	ldr	r3, [pc, #532]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001502:	2b08      	cmp	r3, #8
 8001504:	d112      	bne.n	800152c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001506:	4b82      	ldr	r3, [pc, #520]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800150e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001512:	d10b      	bne.n	800152c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	4b7e      	ldr	r3, [pc, #504]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d05b      	beq.n	80015d8 <HAL_RCC_OscConfig+0x108>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d157      	bne.n	80015d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e242      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001534:	d106      	bne.n	8001544 <HAL_RCC_OscConfig+0x74>
 8001536:	4b76      	ldr	r3, [pc, #472]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a75      	ldr	r2, [pc, #468]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 800153c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e01d      	b.n	8001580 <HAL_RCC_OscConfig+0xb0>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800154c:	d10c      	bne.n	8001568 <HAL_RCC_OscConfig+0x98>
 800154e:	4b70      	ldr	r3, [pc, #448]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6f      	ldr	r2, [pc, #444]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b6d      	ldr	r3, [pc, #436]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a6c      	ldr	r2, [pc, #432]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e00b      	b.n	8001580 <HAL_RCC_OscConfig+0xb0>
 8001568:	4b69      	ldr	r3, [pc, #420]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a68      	ldr	r2, [pc, #416]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 800156e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b66      	ldr	r3, [pc, #408]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a65      	ldr	r2, [pc, #404]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 800157a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800157e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d013      	beq.n	80015b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fcee 	bl	8000f68 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001590:	f7ff fcea 	bl	8000f68 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	@ 0x64
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e207      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0xc0>
 80015ae:	e014      	b.n	80015da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fcda 	bl	8000f68 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff fcd6 	bl	8000f68 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e1f3      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ca:	4b51      	ldr	r3, [pc, #324]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0xe8>
 80015d6:	e000      	b.n	80015da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d063      	beq.n	80016ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00b      	beq.n	800160a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f2:	4b47      	ldr	r3, [pc, #284]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d11c      	bne.n	8001638 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fe:	4b44      	ldr	r3, [pc, #272]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d116      	bne.n	8001638 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	4b41      	ldr	r3, [pc, #260]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <HAL_RCC_OscConfig+0x152>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d001      	beq.n	8001622 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e1c7      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001622:	4b3b      	ldr	r3, [pc, #236]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	4937      	ldr	r1, [pc, #220]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001636:	e03a      	b.n	80016ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d020      	beq.n	8001682 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001640:	4b34      	ldr	r3, [pc, #208]	@ (8001714 <HAL_RCC_OscConfig+0x244>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001646:	f7ff fc8f 	bl	8000f68 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164e:	f7ff fc8b 	bl	8000f68 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e1a8      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001660:	4b2b      	ldr	r3, [pc, #172]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166c:	4b28      	ldr	r3, [pc, #160]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	4925      	ldr	r1, [pc, #148]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
 8001680:	e015      	b.n	80016ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001682:	4b24      	ldr	r3, [pc, #144]	@ (8001714 <HAL_RCC_OscConfig+0x244>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fc6e 	bl	8000f68 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff fc6a 	bl	8000f68 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e187      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d036      	beq.n	8001728 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d016      	beq.n	80016f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <HAL_RCC_OscConfig+0x248>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c8:	f7ff fc4e 	bl	8000f68 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fc4a 	bl	8000f68 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e167      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <HAL_RCC_OscConfig+0x240>)
 80016e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d0f0      	beq.n	80016d0 <HAL_RCC_OscConfig+0x200>
 80016ee:	e01b      	b.n	8001728 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f0:	4b09      	ldr	r3, [pc, #36]	@ (8001718 <HAL_RCC_OscConfig+0x248>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f6:	f7ff fc37 	bl	8000f68 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fc:	e00e      	b.n	800171c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016fe:	f7ff fc33 	bl	8000f68 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d907      	bls.n	800171c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e150      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
 8001710:	40023800 	.word	0x40023800
 8001714:	42470000 	.word	0x42470000
 8001718:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171c:	4b88      	ldr	r3, [pc, #544]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 800171e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1ea      	bne.n	80016fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 8097 	beq.w	8001864 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173a:	4b81      	ldr	r3, [pc, #516]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10f      	bne.n	8001766 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	4b7d      	ldr	r3, [pc, #500]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	4a7c      	ldr	r2, [pc, #496]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40
 8001756:	4b7a      	ldr	r3, [pc, #488]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001762:	2301      	movs	r3, #1
 8001764:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001766:	4b77      	ldr	r3, [pc, #476]	@ (8001944 <HAL_RCC_OscConfig+0x474>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d118      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001772:	4b74      	ldr	r3, [pc, #464]	@ (8001944 <HAL_RCC_OscConfig+0x474>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a73      	ldr	r2, [pc, #460]	@ (8001944 <HAL_RCC_OscConfig+0x474>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800177c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177e:	f7ff fbf3 	bl	8000f68 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001786:	f7ff fbef 	bl	8000f68 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e10c      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	4b6a      	ldr	r3, [pc, #424]	@ (8001944 <HAL_RCC_OscConfig+0x474>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x2ea>
 80017ac:	4b64      	ldr	r3, [pc, #400]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017b0:	4a63      	ldr	r2, [pc, #396]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017b8:	e01c      	b.n	80017f4 <HAL_RCC_OscConfig+0x324>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b05      	cmp	r3, #5
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x30c>
 80017c2:	4b5f      	ldr	r3, [pc, #380]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80017ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80017da:	e00b      	b.n	80017f4 <HAL_RCC_OscConfig+0x324>
 80017dc:	4b58      	ldr	r3, [pc, #352]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e0:	4a57      	ldr	r2, [pc, #348]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e8:	4b55      	ldr	r3, [pc, #340]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ec:	4a54      	ldr	r2, [pc, #336]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 80017ee:	f023 0304 	bic.w	r3, r3, #4
 80017f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d015      	beq.n	8001828 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fc:	f7ff fbb4 	bl	8000f68 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001802:	e00a      	b.n	800181a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001804:	f7ff fbb0 	bl	8000f68 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0cb      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800181a:	4b49      	ldr	r3, [pc, #292]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0ee      	beq.n	8001804 <HAL_RCC_OscConfig+0x334>
 8001826:	e014      	b.n	8001852 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001828:	f7ff fb9e 	bl	8000f68 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182e:	e00a      	b.n	8001846 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001830:	f7ff fb9a 	bl	8000f68 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e0b5      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001846:	4b3e      	ldr	r3, [pc, #248]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ee      	bne.n	8001830 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001852:	7dfb      	ldrb	r3, [r7, #23]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d105      	bne.n	8001864 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001858:	4b39      	ldr	r3, [pc, #228]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185c:	4a38      	ldr	r2, [pc, #224]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 800185e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001862:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 80a1 	beq.w	80019b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800186e:	4b34      	ldr	r3, [pc, #208]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 030c 	and.w	r3, r3, #12
 8001876:	2b08      	cmp	r3, #8
 8001878:	d05c      	beq.n	8001934 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d141      	bne.n	8001906 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001882:	4b31      	ldr	r3, [pc, #196]	@ (8001948 <HAL_RCC_OscConfig+0x478>)
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff fb6e 	bl	8000f68 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff fb6a 	bl	8000f68 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e087      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a2:	4b27      	ldr	r3, [pc, #156]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f0      	bne.n	8001890 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69da      	ldr	r2, [r3, #28]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018bc:	019b      	lsls	r3, r3, #6
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c4:	085b      	lsrs	r3, r3, #1
 80018c6:	3b01      	subs	r3, #1
 80018c8:	041b      	lsls	r3, r3, #16
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d0:	061b      	lsls	r3, r3, #24
 80018d2:	491b      	ldr	r1, [pc, #108]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 80018d4:	4313      	orrs	r3, r2
 80018d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <HAL_RCC_OscConfig+0x478>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018de:	f7ff fb43 	bl	8000f68 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e6:	f7ff fb3f 	bl	8000f68 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e05c      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f8:	4b11      	ldr	r3, [pc, #68]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x416>
 8001904:	e054      	b.n	80019b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001906:	4b10      	ldr	r3, [pc, #64]	@ (8001948 <HAL_RCC_OscConfig+0x478>)
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fb2c 	bl	8000f68 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001914:	f7ff fb28 	bl	8000f68 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e045      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001926:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <HAL_RCC_OscConfig+0x470>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x444>
 8001932:	e03d      	b.n	80019b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d107      	bne.n	800194c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e038      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
 8001940:	40023800 	.word	0x40023800
 8001944:	40007000 	.word	0x40007000
 8001948:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800194c:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <HAL_RCC_OscConfig+0x4ec>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d028      	beq.n	80019ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d121      	bne.n	80019ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d11a      	bne.n	80019ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800197c:	4013      	ands	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001982:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001984:	4293      	cmp	r3, r2
 8001986:	d111      	bne.n	80019ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001992:	085b      	lsrs	r3, r3, #1
 8001994:	3b01      	subs	r3, #1
 8001996:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d107      	bne.n	80019ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800

080019c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e0cc      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019d4:	4b68      	ldr	r3, [pc, #416]	@ (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d90c      	bls.n	80019fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019e2:	4b65      	ldr	r3, [pc, #404]	@ (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	4b63      	ldr	r3, [pc, #396]	@ (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0b8      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d020      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a14:	4b59      	ldr	r3, [pc, #356]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a58      	ldr	r2, [pc, #352]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d005      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a2c:	4b53      	ldr	r3, [pc, #332]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a52      	ldr	r2, [pc, #328]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a38:	4b50      	ldr	r3, [pc, #320]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	494d      	ldr	r1, [pc, #308]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d044      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d107      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5e:	4b47      	ldr	r3, [pc, #284]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d119      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e07f      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e06f      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e067      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9e:	4b37      	ldr	r3, [pc, #220]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f023 0203 	bic.w	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	4934      	ldr	r1, [pc, #208]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab0:	f7ff fa5a 	bl	8000f68 <HAL_GetTick>
 8001ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab8:	f7ff fa56 	bl	8000f68 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e04f      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	4b2b      	ldr	r3, [pc, #172]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 020c 	and.w	r2, r3, #12
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d1eb      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d20c      	bcs.n	8001b08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b20      	ldr	r3, [pc, #128]	@ (8001b78 <HAL_RCC_ClockConfig+0x1b8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e032      	b.n	8001b6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b14:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	4916      	ldr	r1, [pc, #88]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d009      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b32:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	490e      	ldr	r1, [pc, #56]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b46:	f000 f821 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b7c <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	091b      	lsrs	r3, r3, #4
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	490a      	ldr	r1, [pc, #40]	@ (8001b80 <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	5ccb      	ldrb	r3, [r1, r3]
 8001b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5e:	4a09      	ldr	r2, [pc, #36]	@ (8001b84 <HAL_RCC_ClockConfig+0x1c4>)
 8001b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001b62:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <HAL_RCC_ClockConfig+0x1c8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f9ba 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40023c00 	.word	0x40023c00
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	080022dc 	.word	0x080022dc
 8001b84:	20000008 	.word	0x20000008
 8001b88:	2000000c 	.word	0x2000000c

08001b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b90:	b090      	sub	sp, #64	@ 0x40
 8001b92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba4:	4b59      	ldr	r3, [pc, #356]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d00d      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x40>
 8001bb0:	2b08      	cmp	r3, #8
 8001bb2:	f200 80a1 	bhi.w	8001cf8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d003      	beq.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bbe:	e09b      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bc0:	4b53      	ldr	r3, [pc, #332]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bc4:	e09b      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bc6:	4b53      	ldr	r3, [pc, #332]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bca:	e098      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bcc:	4b4f      	ldr	r3, [pc, #316]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bd4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bd6:	4b4d      	ldr	r3, [pc, #308]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d028      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be2:	4b4a      	ldr	r3, [pc, #296]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	099b      	lsrs	r3, r3, #6
 8001be8:	2200      	movs	r2, #0
 8001bea:	623b      	str	r3, [r7, #32]
 8001bec:	627a      	str	r2, [r7, #36]	@ 0x24
 8001bee:	6a3b      	ldr	r3, [r7, #32]
 8001bf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4b47      	ldr	r3, [pc, #284]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bf8:	fb03 f201 	mul.w	r2, r3, r1
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	fb00 f303 	mul.w	r3, r0, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	4a43      	ldr	r2, [pc, #268]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c06:	fba0 1202 	umull	r1, r2, r0, r2
 8001c0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001c10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c12:	4413      	add	r3, r2
 8001c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c18:	2200      	movs	r2, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
 8001c1c:	61fa      	str	r2, [r7, #28]
 8001c1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c26:	f7fe fad5 	bl	80001d4 <__aeabi_uldivmod>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4613      	mov	r3, r2
 8001c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c32:	e053      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c34:	4b35      	ldr	r3, [pc, #212]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	099b      	lsrs	r3, r3, #6
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	617a      	str	r2, [r7, #20]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c46:	f04f 0b00 	mov.w	fp, #0
 8001c4a:	4652      	mov	r2, sl
 8001c4c:	465b      	mov	r3, fp
 8001c4e:	f04f 0000 	mov.w	r0, #0
 8001c52:	f04f 0100 	mov.w	r1, #0
 8001c56:	0159      	lsls	r1, r3, #5
 8001c58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c5c:	0150      	lsls	r0, r2, #5
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	ebb2 080a 	subs.w	r8, r2, sl
 8001c66:	eb63 090b 	sbc.w	r9, r3, fp
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001c76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001c7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c7e:	ebb2 0408 	subs.w	r4, r2, r8
 8001c82:	eb63 0509 	sbc.w	r5, r3, r9
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	00eb      	lsls	r3, r5, #3
 8001c90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c94:	00e2      	lsls	r2, r4, #3
 8001c96:	4614      	mov	r4, r2
 8001c98:	461d      	mov	r5, r3
 8001c9a:	eb14 030a 	adds.w	r3, r4, sl
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	eb45 030b 	adc.w	r3, r5, fp
 8001ca4:	607b      	str	r3, [r7, #4]
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	f04f 0300 	mov.w	r3, #0
 8001cae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	028b      	lsls	r3, r1, #10
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	028a      	lsls	r2, r1, #10
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	60fa      	str	r2, [r7, #12]
 8001ccc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cd0:	f7fe fa80 	bl	80001d4 <__aeabi_uldivmod>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4613      	mov	r3, r2
 8001cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x180>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001cec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cf6:	e002      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x184>)
 8001cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3740      	adds	r7, #64	@ 0x40
 8001d04:	46bd      	mov	sp, r7
 8001d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	00f42400 	.word	0x00f42400
 8001d14:	017d7840 	.word	0x017d7840

08001d18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e07b      	b.n	8001e22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d108      	bne.n	8001d44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001d3a:	d009      	beq.n	8001d50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
 8001d42:	e005      	b.n	8001d50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe ffe2 	bl	8000d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2202      	movs	r2, #2
 8001d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	431a      	orrs	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dd4:	ea42 0103 	orr.w	r1, r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ddc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	0c1b      	lsrs	r3, r3, #16
 8001dee:	f003 0104 	and.w	r1, r3, #4
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	f003 0210 	and.w	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	69da      	ldr	r2, [r3, #28]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b088      	sub	sp, #32
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4613      	mov	r3, r2
 8001e38:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e3a:	f7ff f895 	bl	8000f68 <HAL_GetTick>
 8001e3e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001e40:	88fb      	ldrh	r3, [r7, #6]
 8001e42:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d001      	beq.n	8001e54 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001e50:	2302      	movs	r3, #2
 8001e52:	e12a      	b.n	80020aa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <HAL_SPI_Transmit+0x36>
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e122      	b.n	80020aa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_SPI_Transmit+0x48>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e11b      	b.n	80020aa <HAL_SPI_Transmit+0x280>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	68ba      	ldr	r2, [r7, #8]
 8001e8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	88fa      	ldrh	r2, [r7, #6]
 8001e92:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	88fa      	ldrh	r2, [r7, #6]
 8001e98:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ec0:	d10f      	bne.n	8001ee2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ed0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001ee0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eec:	2b40      	cmp	r3, #64	@ 0x40
 8001eee:	d007      	beq.n	8001f00 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001efe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f08:	d152      	bne.n	8001fb0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <HAL_SPI_Transmit+0xee>
 8001f12:	8b7b      	ldrh	r3, [r7, #26]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d145      	bne.n	8001fa4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1c:	881a      	ldrh	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f28:	1c9a      	adds	r2, r3, #2
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f3c:	e032      	b.n	8001fa4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d112      	bne.n	8001f72 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f50:	881a      	ldrh	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	1c9a      	adds	r2, r3, #2
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001f70:	e018      	b.n	8001fa4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f72:	f7fe fff9 	bl	8000f68 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d803      	bhi.n	8001f8a <HAL_SPI_Transmit+0x160>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f88:	d102      	bne.n	8001f90 <HAL_SPI_Transmit+0x166>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d109      	bne.n	8001fa4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e082      	b.n	80020aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1c7      	bne.n	8001f3e <HAL_SPI_Transmit+0x114>
 8001fae:	e053      	b.n	8002058 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_SPI_Transmit+0x194>
 8001fb8:	8b7b      	ldrh	r3, [r7, #26]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d147      	bne.n	800204e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	330c      	adds	r3, #12
 8001fc8:	7812      	ldrb	r2, [r2, #0]
 8001fca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	1c5a      	adds	r2, r3, #1
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fe4:	e033      	b.n	800204e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d113      	bne.n	800201c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	330c      	adds	r3, #12
 8001ffe:	7812      	ldrb	r2, [r2, #0]
 8002000:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	86da      	strh	r2, [r3, #54]	@ 0x36
 800201a:	e018      	b.n	800204e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800201c:	f7fe ffa4 	bl	8000f68 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d803      	bhi.n	8002034 <HAL_SPI_Transmit+0x20a>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002032:	d102      	bne.n	800203a <HAL_SPI_Transmit+0x210>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e02d      	b.n	80020aa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1c6      	bne.n	8001fe6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002058:	69fa      	ldr	r2, [r7, #28]
 800205a:	6839      	ldr	r1, [r7, #0]
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f8b1 	bl	80021c4 <SPI_EndRxTxTransaction>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2220      	movs	r2, #32
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10a      	bne.n	800208c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80020a8:	2300      	movs	r3, #0
  }
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020c4:	f7fe ff50 	bl	8000f68 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020d4:	f7fe ff48 	bl	8000f68 <HAL_GetTick>
 80020d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020da:	4b39      	ldr	r3, [pc, #228]	@ (80021c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	015b      	lsls	r3, r3, #5
 80020e0:	0d1b      	lsrs	r3, r3, #20
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020ea:	e054      	b.n	8002196 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f2:	d050      	beq.n	8002196 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020f4:	f7fe ff38 	bl	8000f68 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	429a      	cmp	r2, r3
 8002102:	d902      	bls.n	800210a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d13d      	bne.n	8002186 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002118:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002122:	d111      	bne.n	8002148 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800212c:	d004      	beq.n	8002138 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002136:	d107      	bne.n	8002148 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002146:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002150:	d10f      	bne.n	8002172 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002170:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e017      	b.n	80021b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3b01      	subs	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4013      	ands	r3, r2
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	bf0c      	ite	eq
 80021a6:	2301      	moveq	r3, #1
 80021a8:	2300      	movne	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d19b      	bne.n	80020ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000008 	.word	0x20000008

080021c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2201      	movs	r2, #1
 80021d8:	2102      	movs	r1, #2
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f7ff ff6a 	bl	80020b4 <SPI_WaitFlagStateUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ea:	f043 0220 	orr.w	r2, r3, #32
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e032      	b.n	800225c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80021f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <SPI_EndRxTxTransaction+0xa0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1b      	ldr	r2, [pc, #108]	@ (8002268 <SPI_EndRxTxTransaction+0xa4>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	0d5b      	lsrs	r3, r3, #21
 8002202:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002206:	fb02 f303 	mul.w	r3, r2, r3
 800220a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002214:	d112      	bne.n	800223c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2200      	movs	r2, #0
 800221e:	2180      	movs	r1, #128	@ 0x80
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f7ff ff47 	bl	80020b4 <SPI_WaitFlagStateUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d016      	beq.n	800225a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002230:	f043 0220 	orr.w	r2, r3, #32
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e00f      	b.n	800225c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3b01      	subs	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002252:	2b80      	cmp	r3, #128	@ 0x80
 8002254:	d0f2      	beq.n	800223c <SPI_EndRxTxTransaction+0x78>
 8002256:	e000      	b.n	800225a <SPI_EndRxTxTransaction+0x96>
        break;
 8002258:	bf00      	nop
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000008 	.word	0x20000008
 8002268:	165e9f81 	.word	0x165e9f81

0800226c <memset>:
 800226c:	4402      	add	r2, r0
 800226e:	4603      	mov	r3, r0
 8002270:	4293      	cmp	r3, r2
 8002272:	d100      	bne.n	8002276 <memset+0xa>
 8002274:	4770      	bx	lr
 8002276:	f803 1b01 	strb.w	r1, [r3], #1
 800227a:	e7f9      	b.n	8002270 <memset+0x4>

0800227c <__libc_init_array>:
 800227c:	b570      	push	{r4, r5, r6, lr}
 800227e:	4d0d      	ldr	r5, [pc, #52]	@ (80022b4 <__libc_init_array+0x38>)
 8002280:	4c0d      	ldr	r4, [pc, #52]	@ (80022b8 <__libc_init_array+0x3c>)
 8002282:	1b64      	subs	r4, r4, r5
 8002284:	10a4      	asrs	r4, r4, #2
 8002286:	2600      	movs	r6, #0
 8002288:	42a6      	cmp	r6, r4
 800228a:	d109      	bne.n	80022a0 <__libc_init_array+0x24>
 800228c:	4d0b      	ldr	r5, [pc, #44]	@ (80022bc <__libc_init_array+0x40>)
 800228e:	4c0c      	ldr	r4, [pc, #48]	@ (80022c0 <__libc_init_array+0x44>)
 8002290:	f000 f818 	bl	80022c4 <_init>
 8002294:	1b64      	subs	r4, r4, r5
 8002296:	10a4      	asrs	r4, r4, #2
 8002298:	2600      	movs	r6, #0
 800229a:	42a6      	cmp	r6, r4
 800229c:	d105      	bne.n	80022aa <__libc_init_array+0x2e>
 800229e:	bd70      	pop	{r4, r5, r6, pc}
 80022a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022a4:	4798      	blx	r3
 80022a6:	3601      	adds	r6, #1
 80022a8:	e7ee      	b.n	8002288 <__libc_init_array+0xc>
 80022aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ae:	4798      	blx	r3
 80022b0:	3601      	adds	r6, #1
 80022b2:	e7f2      	b.n	800229a <__libc_init_array+0x1e>
 80022b4:	080022f4 	.word	0x080022f4
 80022b8:	080022f4 	.word	0x080022f4
 80022bc:	080022f4 	.word	0x080022f4
 80022c0:	080022f8 	.word	0x080022f8

080022c4 <_init>:
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c6:	bf00      	nop
 80022c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ca:	bc08      	pop	{r3}
 80022cc:	469e      	mov	lr, r3
 80022ce:	4770      	bx	lr

080022d0 <_fini>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	bf00      	nop
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr
